
/******************************************************/
/****         Predicates Declaration              *****/
/******************************************************/

primitive(vulExists(_host, _vulID, _program)).
primitive(vulProperty(_vulID, _range, _consequence)).
primitive(haclprimit(_src, _dst, _prot, _port)).
primitive(attackerLocated(_host)).
primitive(hasAccount(_principal, _host, _account)).
primitive(networkServiceInfo(_ip, _program, _protocol, _port, _user)).
primitive(installed(_h, _program)).
primitive(isInVlan(_ip,_vlan)). /*The ip is in VLAN _vlan */
primitive(vlanToVlan(_vlan1,_vlan2,_protocol,_port)).
primitive(ipToVlan(_ip,_vlan,_protocol,_port)).
primitive(vlanToIP(_vlan,_ip,_protocol,_port)).
primitive(vnfManagedBy(_host,_vnfm)).
primitive(defaultLocalFilteringBehavior(_toip,_behavior)). /* allow / deny*/
primitive(localFilteringRule(_fromIP,_toIP,_port,_behavior)).
/*multi-interface*/
primitive(hasIP(_host,_IP)).

derived(accessFile(_machine, _access, _filepath)).
derived(canAccessHost(_host)).
derived(execCode(_host, _user)).
derived(hacl(_src, _dst, _prot, _port)).
derived(ipInSameVLAN(_ip1,_ip2)).
derived(localAccessEnabled(_ip,_fromIP,port)).
derived(netAccess(_ip,_protocol,_port)).

meta(cvss(_vulID, _ac)).
meta(attackGoal(_)).

/******************************************************/
/****         Tabling Predicates                  *****/
/*   All derived predicates should be tabled          */
/******************************************************/

:- table accessFile/3.
:- table vulExists/3.
:- table vulProperty/3.
:- table execCode/2.
:- table netAccess/3.
:- table canAccessHost/1.
:- table hacl/4.
:- table ipInSameVLAN/2.
:- table localAccessEnabled/3.

/******************************************************/
/****         Interaction Rules                   *****/
/******************************************************/

interaction_rule(
  (execCode(Host, root) :-
	execCode(Host, _Perm2),
	vulExists(Host, VulId, Software), vulProperty( VulId, localExploit, privEscalation),
	_Perm2 \== root),
  rule_desc('local exploit',
  1.0)).

interaction_rule(
  (execCode(H, 'user') :-
	vulExists(H, VulId, Software), vulProperty( VulId, remoteExploit, privEscalation),
	hasIP(H,IP),
	networkServiceInfo(IP, Software, Protocol, Port, 'user'),
	netAccess(IP, Protocol, Port)),
  rule_desc('remote exploit of a server program',
  1.0)).

interaction_rule(
  (netAccess(IP2, Protocol, Port) :-
	execCode(H1, _),
	hasIP(H1,IP1),
	hasIP(H2, IP2),
	H1 \== H2,
    	hacl(IP1, IP2, Protocol, Port)),
  rule_desc('multi-hop access',
  0.5)).

interaction_rule(
  (execCode(Host, root) :-
	attackerLocated(Host)),
  rule_desc('Attacker is root on his machine',
  1.0)).

/****** Section canAccessHost ******/

interaction_rule(
  (canAccessHost(H) :-
	execCode(H, _Perm)),
  rule_desc('Access a host through executing code on the machine',
  1.0)).

interaction_rule(
    (hacl(IP1,IP2,Protocol,Port) :-
        haclprimit(IP1,IP2,Protocol,Port)),
    rule_desc('The HACL has been defined manually',
   1.0)). 

interaction_rule(
    (ipInSameVLAN(IP1,IP2) :-
        isInVlan(IP1,Vlan),
        IP1 \== IP2 ,
        isInVlan(IP2,Vlan)),
    rule_desc('Interfaces are in the same vlan',
   1.0)).
   
interaction_rule(
    (hacl(IP1,IP2,_,_) :-
        ipInSameVLAN(IP1,IP2),
        localAccessEnabled(IP1,IP2,Port)),
    rule_desc('Access enabled between hosts in same vlan',
   1.0)).
   
interaction_rule(
    (hacl(IP1,IP2,Protocol,Port) :-
        vlanToVlan(Vlan1,Vlan2,Protocol,Port),
        Vlan1 \== Vlan2 ,
        isInVlan(IP1,Vlan1),
        isInVlan(IP2,Vlan2)),
    rule_desc('Access across VLANs',
   1.0)).

interaction_rule(
    (hacl(IP1,IP2,Protocol,Port) :-
        ipToVlan(IP1,Vlan,Protocol,Port),
        isInVlan(IP2,Vlan)),
    rule_desc('Access to VLAN',
   1.0)).  
   
   
interaction_rule(
    (hacl(IP1,IP2,Protocol,Port) :-
        vlanToIP(Vlan,IP2,Protocol,Port),
        isInVlan(IP1,Vlan)),
    rule_desc('Access from VLAN',
   1.0)).
   
   
interaction_rule(
  (localAccessEnabled(FromIP,ToIP,_) :-
	defaultLocalFilteringBehavior(ToIP, allow)),
  rule_desc('No local filtering on this host',
  1.0)).
  
interaction_rule(
  (localAccessEnabled(FromIp,ToIP,Port) :-
	localFilteringRule(FromIP,ToIP,Port, allow)),
  rule_desc('Local filtering allow this access',
  1.0)).  

/****** Section execCode ******/

/* primitive predicates declaration */

primitive(vmOnHost( _vm, _host, _software, _user )).
primitive(vmInDomain( _vm, _orchestrator )).
primitive(vnfOnPath(_vnf,_host1,_host2,_port,_daemon,_user)).
primitive(localServiceInfo(_servicename, _host, _program, _user)).

/* derived predicates declaration */

derived(orchestratorCompromised(_orchestrator)).

/* tabling predicates */

:- table orchestratorCompromised/1.

/* interaction rules */

interaction_rule(
	(execCode(Hypervisor, User) :-
		execCode(Vm, _), 
		vmOnHost(Vm, Hypervisor, Software, User), 
		vulExists(Hypervisor, Vuln, Software), vulProperty(Vuln, localExploit, privEscalation)),
	rule_desc('can escape from VM to host', 1)).

interaction_rule(
	(execCode(Host, User) :-
		execCode(Host, root), User \== root),
	rule_desc('root can impersonate any user', 1)).

interaction_rule(
	(execCode(Vm, root) :-
		vmOnHost(Vm, Hypervisor, _, User), execCode(Hypervisor, User)),
	rule_desc('VM runs on compromised host so it is compromised', 1)).

interaction_rule(
	(accessFile(Vm, _, _) :-
		vmOnHost(Vm, Hypervisor, _, User), execCode(Hypervisor, User)),
	rule_desc('Can access VM filesystem through hypervisor', 1)).

interaction_rule(
	(orchestratorCompromised(Orchestrator) :-
		localServiceInfo(Orchestrator, Host, Program, User), execCode(Host, User)),
	rule_desc('Can take over orchestrator from its host', 1)).

interaction_rule(
	(execCode(Vm, root) :-
		vmInDomain(Vm, Orchestrator), orchestratorCompromised(Orchestrator)),
	rule_desc('Host controlled by compromised orchestrator or controller', 1)).

interaction_rule(
	(execCode(Vnf, User) :-
		vnfOnPath(Vnf, Host1, Host2, Port, Software, User), execCode(Host1, _), vulExists(Vnf, Vuln, Software), vulProperty(Vuln, vnfExploit, privEscalation)),
	rule_desc('can execute code on VNF 3 party interaction rule', 1)).

/************************************/
/*              NDN                 */
/************************************/

/* primitive predicates declaration */

primitive(hasNDNFace(_host, _face)).
primitive(isNDNRouter(_host)).
primitive(ndnServiceInfo(_host, _software, _user)).
primitive(ndnLink( _host1, _face1, _host2, _face2 )).

/* derived predicates declaration */

derived(ndnOutputCompromised(_ndnRouter,_signatureMode)).
derived(ndnOutputCompromisedLocal(_ndnRouter)).
derived(ndnOutputCompromisedRemote(_ndnRouter1,_ndnRouter2,_signatureMode)).
derived(ndnTrafficIntercepted(_ndnRouter)).

/* tabling predicates */

:- table ndnTrafficIntercepted/1.
:- table ndnOutputCompromised/2.
:- table ndnOutputCompromisedLocal/1.
:- table ndnOutputCompromisedRemote/3.

/* interaction rules */

/****** Section ndnOutputCompromised ******/

/* Local */

interaction_rule(
        (ndnOutputCompromised( NDNRouter, _ ) :-
                isNDNRouter( NDNRouter ),
                ndnOutputCompromisedLocal( NDNRouter )),
        rule_desc('NDN output compromised for local reason', 1.0)).

/* execCode -> output compromised and signed   (FAKE DATA)      */
/* execCode -> output compromised and unsigned (CORRUPTED DATA) */

interaction_rule(
        (ndnOutputCompromisedLocal( NDNRouter ) :-
                execCode(NDNRouter, _)),
        rule_desc('Attacker can modify data sent by host or router', 1.0)).

/* malicious packets crossing the IGW in the direction IP -> NDN */ 

interaction_rule(
        (ndnOutputCompromisedLocal( NDNRouter ) :-
                hasIP(NDNRouter, IP),
                networkServiceInfo(IP, 'igw-daemon', Protocol, Port, _),
                netAccess(IP, Protocol, Port)
                ),
        rule_desc('Attacker can cross IGW from IP to NDN domain', 1.0)).

/* Remote */

interaction_rule(
        (ndnOutputCompromised( NDNRouter1, SigMode ) :-
                isNDNRouter( NDNRouter1 ),
                ndnLink(NDNRouter1, _, NDNRouter2, _),
                ndnOutputCompromisedRemote( NDNRouter1, NDNRouter2, SigMode )),
        rule_desc('NDN output compromised for remote reason', 1.0)).

/* Input compromised and signed -> output compromised signed (CACHE POISONING With FAKE DATA) */

interaction_rule(
        (ndnOutputCompromisedRemote( NDNRouter1, NDNRouter2, signedData ) :-
                ndnOutputCompromised( NDNRouter2, signedData )),
         rule_desc('NDN router transfers signed but compromised data', 1.0)).

/* Input compromised and unsigned + don't check signature -> output compromised and unsigned (CACHE POISONNING With CORRUPTED DATA) */

interaction_rule(
        (ndnOutputCompromisedRemote( NDNRouter1, NDNRouter2, unsignedData ) :-
                vulExists(NDNRouter1, Vuln, Software), vulProperty(Vuln, signatureExploit, cachePoisonned),
                ndnOutputCompromised(NDNRouter2, unsignedData )),
         rule_desc('NDN router can transfer unsigned and compromised data', 1.0)).

/*                    -----------------                              */
/* routers replying to interest from another face (signed version)   */
/* routers replying to interest from another face (unsigned version) */
/*                    -----------------                              */
interaction_rule(
        (ndnOutputCompromisedRemote(NDNRouter1, NDNRouter2, _ ) :-
                vulExists(NDNRouter2, Vuln, _ ), vulProperty(Vuln, pitExploit, cachePoisonned)),
        rule_desc('Attacker can send replies to interests issued to another interface', 1.0)).

/****** Section netAccess ******/

/* malicious packets crossing the EGW in the direction NDN -> IP */
interaction_rule(
        (netAccess(IP, Protocol, Port) :-
                ndnServiceInfo(EGW, 'egw-daemon', _),
                hasIP(EGW, IPEGW),
                hacl(IPEGW, IP, Protocol, Port),
                ndnLink(EGW, _, NDNRouter, _),
                ndnOutputCompromised(NDNRouter, _)),
        rule_desc('Attacker can cross EGW from NDN to IP domain', 1.0)).

/****** Section execCode ******/

/*                    -----------------                         */
/* Input compromised and signed + vulnerability   -> execCode (CACHE POISONNING With FAKE DATA)      */
/* Input compromised and unsigned + vulnerability -> execCode (CACHE POISONNING With CORRUPTED DATA) */
/*                    -----------------                         */

interaction_rule(
        (execCode(NDNRouter1, User) :-
                isNDNRouter(NDNRouter1),
                ndnLink(NDNRouter1, _, NDNRouter2, _),
                ndnOutputCompromised(NDNRouter2,_),
                ndnServiceInfo(NDNRouter1, Software, User),
                vulExists(NDNRouter1, Vuln, Software),
                vulProperty(Vuln, remoteExploit, privEscalation)),
        rule_desc('Can execute code on NDN router', 1.0)).

/****** Section ndnTrafficIntercepted ******/
        
/* routers accepting FIB announcements without signature verification */        
interaction_rule(
        (ndnTrafficIntercepted(Host) :-
                ndnLink(Host, _, Host2, _),
                execCode(Host2, _),
                isNDNRouter(Host),
                vulExists(Host, Vuln, Software),
                vulProperty(Vuln, fibExploit, corruptFib)),
        rule_desc('Attacker can redirect router upstream to controlled router to intercept traffic', 1.0)).
        
        
/* IFA : Problem : IFA does not permit to corrupt data or propagate attack */

