/****************************************************************************************
 * This file is part of FIWARE CyberCAPTOR,                                             *
 * instance of FIWARE Cyber Security Generic Enabler                                    *
 * Copyright (C) 2012-2015  Thales Services S.A.S.,                                     *
 * 20-22 rue Grande Dame Rose 78140 VELIZY-VILACOUBLAY FRANCE                           *
 *                                                                                      *
 * FIWARE CyberCAPTOR is free software; you can redistribute                            *
 * it and/or modify it under the terms of the GNU General Public License                *
 * as published by the Free Software Foundation; either version 3 of the License,       *
 * or (at your option) any later version.                                               *
 *                                                                                      *
 * FIWARE CyberCAPTOR is distributed in the hope                                        *
 * that it will be useful, but WITHOUT ANY WARRANTY; without even the implied           *
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            *
 * GNU General Public License for more details.                                         *
 *                                                                                      *
 * You should have received a copy of the GNU General Public License                    *
 * along with FIWARE Cyber Security Generic Enabler.                                    *
 * If not, see <http://www.gnu.org/licenses/>.                                          *
 ****************************************************************************************/

package org.fiware.cybercaptor.server.vulnerability;

import org.fiware.cybercaptor.server.database.Database;
import org.fiware.cybercaptor.server.properties.ProjectProperties;

import java.io.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Class that represents a CPE (Common Platform Enumeration)
 *
 * @author Francois-Xavier Aguessy
 */
public class CPE {
    /**
     * The id of the CPE in the database
     */
    public int id = 0;

    /**
     * The CPE identifier : "cpe:/..."
     */
    public String cpe_id = "";

    /**
     * Instantiates a new CPE.
     *
     * @param cpe_id the cpe _ id
     */
    public CPE(String cpe_id) {
        this.cpe_id = cpe_id;
    }

    /**
     * The entry point of application to populate the CPEs.
     *
     * @param args the input arguments
     */
    public static void main(String[] args) {
        String databasePath = ProjectProperties.getProperty("database-path");
        System.out.println("Loading database " + databasePath);
        File databaseFile = new File(databasePath);
        if (databaseFile.exists()) {
            try {
                Database db = new Database(databaseFile.getAbsolutePath());
                db.createDB();
                populateCPECVEDatabase("./resources/CVE-CPE/", db.getConn());
                CPE testCPE = new CPE("cpe:/a:microsoft:ie");
                List<Vulnerability> vulnsTest = testCPE.getVulnerabilities(db.getConn());
                for (Vulnerability aVulnsTest : vulnsTest) {
                    System.out.println(aVulnsTest.cve);
                }
                System.out.println(vulnsTest.size() + " vulnerabilities in IE !");
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            System.out.println("No database found");
        }
    }

    /**
     * Function that add CPEs and CVEs (and their relations) from a folder in which all files are nvdcve-2.0-YYYY.csv
     * whose format is :
     * CVE-1999-0001:5.0:cpe:/o:openbsd:openbsd:2.4
     * CVE-1999-0001:5.0:cpe:/o:freebsd:freebsd:2.2.6
     * ...
     *
     * @param pathToCVECPEFolder the folder in which all CPE/CVE files are located
     * @param conn               the database connection
     * @throws Exception the exception
     */
    public static void populateCPECVEDatabase(String pathToCVECPEFolder, Connection conn) throws Exception {
        File folder = new File(pathToCVECPEFolder);
        File[] CVECPEFiles = folder.listFiles();

        int icount = 0;
        for (File CVECPEFile : CVECPEFiles != null ? CVECPEFiles : new File[0]) {
            if (CVECPEFile.getName().endsWith(".csv")) {
                System.out.print(CVECPEFile.getName() + " ");
                FileInputStream fileToParse = new FileInputStream(CVECPEFile);
                DataInputStream in = new DataInputStream(fileToParse);
                BufferedReader br = new BufferedReader(new InputStreamReader(in));
                String strLine;
                //Read File Line By Line
                Pattern linePattern = Pattern.compile("^(CVE-\\d{4}-\\d+):[\\d\\.]+:(cpe:/[\\w\\-\\.:%]+)$");
                while ((strLine = br.readLine()) != null) {
                    if (!strLine.isEmpty()) {
                        Matcher matcher = linePattern.matcher(strLine);
                        if (matcher.matches()) {
                            String CVE_String = matcher.group(1);
                            String CPE_String = matcher.group(2);

                            Vulnerability vuln = new Vulnerability(CVE_String);
                            vuln.addACPEInDatabase(new CPE(CPE_String), conn);
                        }
                    }
                }
                in.close();
            }
        }
        System.out.println(" total :  " + icount);
    }

    /**
     * Get all vulnerabilities related to this cpe in the Database
     *
     * @param conn The database Connection
     * @return a list of vulnerabilities related to this CPE
     * @throws Exception the exception
     */
    public List<Vulnerability> getVulnerabilities(Connection conn) throws Exception {
        List<Vulnerability> result = new ArrayList<Vulnerability>();
        if (this.inDatabase(conn)) {
            PreparedStatement pstmt = conn.prepareStatement("SELECT id_vulnerability FROM cpe_vulnerability WHERE id_cpe = ?");
            pstmt.setInt(1, id);
            pstmt.execute();
            ResultSet res = pstmt.getResultSet();
            while (res.next()) { //Get all the rules that are related to this vulnerability
                Vulnerability vulnerability = new Vulnerability(conn, res.getInt(1));
                result.add(vulnerability);
            }
        }
        return result;
    }

    /**
     * Find whether or not the CPE is in the database
     *
     * @param conn the database connection
     * @return true if the CPE is in the database, else false
     * @throws java.sql.SQLException the sQL exception
     */
    public boolean inDatabase(Connection conn) throws SQLException {
        PreparedStatement pstmt = conn.prepareStatement("SELECT id,cpe_id FROM cpe WHERE cpe_id LIKE ?");
        pstmt.setString(1, this.cpe_id);
        pstmt.execute();
        ResultSet res = pstmt.getResultSet();
        boolean result = res.next();
        if (result) { //This CPE is already in the DB
            //We get the id of this CPE
            id = res.getInt(1);
        }
        pstmt.close();
        res.close();
        return result;
    }

    /**
     * Save the cpe in the database
     *
     * @param conn The database connection
     * @throws Exception the exception
     */
    public void saveToDatabase(Connection conn) throws Exception {
        if (cpe_id.isEmpty()) {
            return;
        }

        if (!inDatabase(conn)) { //This cpe is not yet in the DB, so we had it
            PreparedStatement pstmt = conn.prepareStatement("INSERT INTO cpe (cpe_id) VALUES(?)");
            pstmt.setString(1, cpe_id);
            pstmt.execute();
            ResultSet resultSetId = pstmt.getGeneratedKeys();
            id = resultSetId.getInt(1);
            resultSetId.close();
        }
    }

}
